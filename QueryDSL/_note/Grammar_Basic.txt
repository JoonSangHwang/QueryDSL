* 검색 조건
  - 메서드 체인
    .and()
    .or()
  - 검색 조건
    .eq("A")                  == A
    .ne("A")                  != A
    .eq("A").not()            != A
    .goe(1)                   >= 1
    .gt(1)                    >  1
    .loe(1)                   <= 1
    .lt(1)                    <  1
    .isNotNull()              is not null
    .in("A", "B")             in ("A", "B")
    .notIn("A", "B")          not in ("A", "B")
    .between("A", "B")        between
    .like("A%")               Like "A%"
    .contains("A")            Like "%A%"
    .startsWith("A")          Like "A%"

* 결과 조회
  - fetch()         : 리스트 조회, 데이터 없으면 빈 리스트 반환
  - fetchOne()      : 단 건 조회 (결과가 없으면 : null / 결과가 둘 이상이면 : com.querydsl.core.NonUniqueResultException)
  - fetchFirst()    : limit(1).fetchOne()
  - fetchResults()  : 페이징 정보 포함, total count 쿼리 추가 실행
  - fetchCount()    : count 쿼리로 변경해서 count 수 조회

* 정렬
  - desc(), asc()               : 일반 정렬
  - nullsLast(), nullsFirst()   : null 데이터 순서 부여

* 페이징 count 쿼리 성능 주의
  - 실무에서 페이징 쿼리를 작성할 때, 데이터를 조회하는 쿼리는 여러 테이블을 조인해야 하지만, count 쿼리는 조인이 필요 없는 경우도 있다.
    그런데 이렇게 자동화된 count 쿼리는 원본 쿼리와 같이 모두 조인을 해버리기 때문에 성능이 안나올 수 있다.
    count 쿼리에 조인이 필요없는 성능 최적화가 필요하다면, count 전용 쿼리를 별도로 작성해야 한다.

* 집합 함수
  - COUNT(m)
  - SUM(m.age)
  - AVG(m.age)
  - MAX(m.age)
  - MIN(m.age)

* GroupBy

* on
  - on 절을 활용해 조인 대상을 필터링 할 때, 외부조인이 아니라 내부조인(inner join)을 사용하면, where 절에서 필터링 하는 것과 기능이 동일하다.
    따라서 on 절을 활용한 조인 대상 필터링을 사용할 때, 내부조인 이면 익숙한 where 절로 해결하고, 정말 외부조인이 필요한 경우에만 이 기능을 사용하자.
  - 하이버네이트 5.1부터 on을 사용해서 서로 관계가 없는 필드로 외부 조인하는 기능이 추가되었다. 물론 내부 조인도 가능하다

* Join
  - join(), innerJoin(): 내부 조인
  - leftJoin(): left 외부 조인
  - rightJoin(): rigth 외부 조인
  - theta_join(): 세타 조인 (연관관계가 없는 필드로 조인)

* fetch join
  - 페치 조인은 SQL에서 제공하는 기능 X. SQL조인을 활용해서 연관된 엔티티를 SQL 한번에 조회하는 기능이다. 주로 성능 최적화에 사용하는 방법

* Sub Query
  - from 절의 서브쿼리 한계 JPA JPQL 서브쿼리의 한계점으로 from 절의 서브쿼리(인라인 뷰)는 지원하지 않는다.
    당연히 Querydsl 도 지원하지 않는다. 하이버네이트 구현체를 사용하면 select 절의 서브쿼리는 지원한다.
    Querydsl 도 하이버네이트 구현체를 사용하면 select 절의 서브쿼리를 지원한다.
  - from 절의 서브쿼리 해결방안
    1. 서브쿼리를 join으로 변경한다. (가능한 상황도 있고, 불가능한 상황도 있다.)
    2. 애플리케이션에서 쿼리를 2번 분리해서 실행한다.
    3. nativeSQL을 사용한다.

* 상수
  - 상수가 필요하면 Expressions.constant(xxx) 사용

* 문자 더하기
  - concat