* QueryDSL 이란?
  - SQL, JPQL을 코드로 작성할 수 있도록 도와주는 빌더 API
  - JPA 크리테이라에 비해서 편리하고 실용적이다
  - 오픈소스
  - 사실 QueryDSL을 쓰는 진짜 이유는 동적 쿼리 때문이다.
  - JPQL은 정적 쿼리이다. 문자열을 더하기 해야하는데, 헬이다.
  - QueryDSL은 코드를 더하는 것이기 때문에, 그것 보다 수월하게 할 수 있다.
  - BooleanBuilder에 조건을 쭉쭉 넣고 쿼리를 실행시키면 된다. 더 자세히 공부해보자.
  - 조건이 있으면 넣고, 없으면 안넣고 불린빌더만 가지고 동적 쿼리가 생성이 된다.
  - 원하는 필드만 뽑아서 DTO로 뽑아내는 기능도 QueryDSL이 다 지원한다.

* Code Generation
  코드 생성 : Gradle > Tasks > other > compileQuerydsl
  생성 폴더 : build > generated

* Dependencies
  - com.querydsl:querydsl-apt
    : Q코드 생성 해주는 라이브러리
  - com.querydsl:querydsl-jpa
    : 쿼리를 만들어주는 라이브러리

* QueryDSL 장점
  - 문자가 아닌 코드로 작성
  - 컴파일 시점에 문법 오류를 발견
  - 코드 자동완성(IDE 도움)
  - 단순하고 쉽다. 코드 모양이 JPQL과 거의 비슷하다.
  - 동적 쿼리

* SQL, JPQL의 문제점
  - SQL, JPQL은 문자열이다. Type-check가 불가능하다.
  - 잘 해봐야 애플리케이션 로딩 시점에 알 수 있다. 컴파일 시점에 알 수 있는 방법이 없다. 자바와 문자열의 한계이다.
  - 해당 로직 실행 전까지 작동여부 확인을 할 수 없다.
  - 해당 쿼리 실행 시점에 오류를 발견한다.

* JPQL vs Querydsl


* JPAQueryFactory를 필드로 제공하면 동시성 문제는 어떻게 될까?
  - 동시성 문제는 JPAQueryFactory를 생성할 때 제공하는 EntityManager(em)에 달려있다.
    즉, JPAQueryFactory 는 싱글톤인 EntityManager 에게 의존한다는 말이다.
    EntityManager 는 트랜잭션 단위로 분리 되어 동작한다.
    다시 말해 스프링 프레임워크는 여러 쓰레드에서 동시에 같은 EntityManager 에 접근해도,
    트랜잭션 마다 별도의 속성 컨텍스트를 제공하기 때문에, 동시성 문제는 걱 정하지 않아도 된다.


* Entitymanager 는 Thread 에 safe 한가?
  - 엔티티매니저는 thread safe 할 수도 있고 안할 수도 있습니다.
    순수하게 자바환경에서 직접 엔티티메니저를 사용하면 쓰레드 세이프 하지 않습니다.
    그런데 스프링 컨테이너를 포함한 J2EE 컨테이너들은 JPA 표준 스펙에 맞추어서 주입받은 엔티티매니저가 쓰레드 세이프 하도록 되어 있습니다.
    쉽게 이야기해서 성경님이 말씀하신 것 처럼 스프링 컨테이너가 쓰레드 세이프하게 관리해주는게 맞습니다.
    조금 더 자세한 내용은 JPA 책 13.1 트랜잭션 범위를 참고.


* Q클래스 인스턴스를 사용하는 2가지 방법
  1.별칭 직접 지정
    QMember qMember = new QMember("m");
  2-1.기본 인스턴스 사용
    QMember qMember = QMember.member;
  2-2.기본 인스턴스의 import static 사용 (추천)
    import static com.joonsang.example.QueryDSL.entity.QMember.*;

* QueryDSL 의 쿼리문
  - QueryDSL 은 JPQL 빌더 역할로 결국 JPQL 로 쿼리가 실행된다.
    기존 설정으로는 쿼리문만 확인을 할 수 있으며, QueryDSL 로 작성 된 JPQL 쿼리 확인을 위해서는 아래와 같은 설정을 넣어주면 된다.
  - spring.jpa.properties.hibernate.use_sql_comments = true
  - 참고로, JPQL 쿼리문에서의 Alias 는 Q클래스 들어가보면 확인 할 수 있는데...
    같은 테이블을 Join 할 경우 겹치니까 Q클래스 인스턴스를 1번 방법으로 사용하자

* 동적 쿼리와 성능 최적화 조회 ????
  1. BooleanBuilder
    - SQL Where Condition
  2. Where 다중 파라미터 사용

* 페이징
  1. 단순한 페이징, fetchResults() 사용
    - 리스트 조회 시, 토탈 카운트를 JPA 가 자동으로 함께 실행 함. (쿼리 총 2번 실행)
  2. 단순한 페이징, fetch() 사용
    - 카운트 쿼리를 따로 작성하여 실행함으로서, 카운트 쿼리 최적화 함.
  3. 단순한 페이징, fetch() 사용
    - countQuery.fetchCount() 를 사용하여 카운트 쿼리 최적화 함.
    - 첫 번째 페이지 or 마지막 페이지 등 카운트 쿼리를 실행 안함으로써 최적화 함.